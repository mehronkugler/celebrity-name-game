<% begin %>
  <% # Test that the searchtext does in fact return a valid movie by testing the result of an arbitrary value %>
  <%  (Enceladus::Movie.find_by_title(params[:searchtext]).total_results > 0) %>
<% rescue Enceladus::Exception::Api => e %>
  <%  @movie = Movie.new("Interstellar") %>
<% else %>
  <%  @movie = Movie.new(params[:searchtext]) %>
<% end %>

// Initialize some variables
var movieQueryBox = document.querySelectorAll("[name=searchbox]");
var searchQuery = ('<%= (params[:searchtext]) %>');
var totalScore = (<%= @score %>);
var totalRounds = (<%= @rounds %>);
var scoreThisRound = 0;
var roundComplete = false;
var draggablesRemaining = 5;


// Award a point and update the score via span
function awardPoint() {
  scoreThisRound++;
}

// Update all scoring variables, actual displayed text, and hidden values in form
function updateScore() {
  // update the variables
  totalRounds++;
  totalScore = (totalScore + scoreThisRound);
  console.log("This round, player scored " + scoreThisRound + " and is now at " + totalScore);

  // update the text inside the displayed scores
  $('.currentscore').text(scoreThisRound);
  $('.totalrounds').text(totalRounds);
  $('.totalscore').text(totalScore);

  // update the form values
  $( '#totalrounds' ).attr('value', (totalRounds));
  // console.log("Form value of #totalrounds is " + $('#totalrounds').attr('value') + " and it should be " + totalRounds);
  $( '#totalscore').attr('value', (totalScore));
  // console.log("Form value of #totalrounds is " + $('#totalrounds').attr('value') + " and it should be " + totalScore);
}

// shrink the extra whitespace left behind when all the draggables are deposited into dropzones
function hideDraggableUL() {
 $( 'section.playingfield:nth-child(1) > div:nth-child(2) > ul:nth-child(2)').attr('style', 'height: 0px;');
}

// use this to reset the field, I don't think Ajax will reload the class also
function showDraggableUL() {
  $( 'section.playingfield:nth-child(1) > div:nth-child(2) > ul:nth-child(2)').attr('style', 'height: auto;');
}

// update the score, the total rounds played, put the values into the hidden fields on the search form (for next submit) and also reset the elements on the page which were hidden or made visible to their default states
function showFinalScore() {
  // show the scoring section
  $( "#results").attr('class', 'visible'); 
  updateScore();
  // add +one to the rounds
  
}

// hide the results div and show the UL for the cards
function resetField() {
  $( '#results' ).attr('class', 'hidden');
  showDraggableUL();
  $('#scorebtn').prop("disabled",false);
}

// Success Loading...
// Thanks to Andrew Borstein for the loader (https://github.com/andrewborstein)
console.log("Looked for new movie: <%= @movie.title %>");
$('.loader').removeClass('loading');

// Replace content in the various <section>s
$(".movieposter").html('<%= escape_javascript(render 'movieposter').html_safe %>');
$(".scoring").html('<%= escape_javascript(render 'scoring').html_safe %>');
$(".playingfield").html('<%= escape_javascript(render 'playingfield').html_safe %>');

// Make AJAX results interactive
$( ".draggable" ).draggable({
  containment: ".playingfield",
  scroll: false,
  snap: ".droppable",
  snapMode: "inner" });

$( ".droppable" ).droppable({
            accept: ".draggable.card.ui-draggable",
            activeClass: "ui-state-hover",
            hoverClass: "ui-state-active",
            drop: function( event, ui ) {
                // set variables for the matching logic
                var myDropzoneID = $( this ).attr('data-dropzone-id');
                var draggedDropzoneID = $(ui.draggable).attr('data-dropzone-id');
                var droppableMatched = $( this ).attr('data-actor-matched');

                // Award a point and refresh the point display if a match is found
                if ((myDropzoneID) == (draggedDropzoneID)) {
                  awardPoint();
                  console.log("Actor name and portrait are a match, point awarded.");
                  console.log("Points are now " +scoreThisRound);
                }
                // Disable the draggable regardless of a proper match or not
                // but leave it alone if something was dropped at the target already

                if ((droppableMatched) == 'false') {
                  $( this ).droppable( "option", "disabled", true );
                  console.log("The draggable " +myDropzoneID+ " is disabled.");

                  $(ui.draggable).draggable( "option", "disabled", true);
                  console.log("The droppable " + draggedDropzoneID + " is disabled.");

                  // set a flag to determine that this droppable has something on it
                  $( this ).attr('data-actor-matched', 'true');

                  // count down to 0 draggables remaining
                  draggablesRemaining = draggablesRemaining - 1;
                  console.log("Draggables remaining: " +draggablesRemaining);
                }
                else {
                  console.log("A draggable was dropped onto " +myDropzoneID+ " but the droppable is already disabled.");
                }
                // when all the draggables have been moved, hide the whitespace where they were
                if ((draggablesRemaining) == 0) {
                  hideDraggableUL();
                }
            }
});

// Disable the default "submit" action on the "Check my score" button.

$( "#scorebtn" ).click(function( event ) {
  // need to unbind the click function because it keeps duplicating the attached event 
  $(this).unbind("click");
  showFinalScore();
  // gray out the button so user can't click multiple times and increment score
  $( this ).prop("disabled",true);
  event.preventDefault();
  return false;
});

$( '#playagain' ).click(function( event) {
  $("html, body").animate({ scrollTop: 0 }, "slow");
  event.preventDefault();
  return false;
});


// reset visual elements each time the page is loaded
resetField();

